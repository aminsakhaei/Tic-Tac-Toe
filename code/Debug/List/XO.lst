
AVRASM ver. 2.1.30  E:\final\Debug\List\XO.asm Fri Jan 21 21:32:23 2022

E:\final\Debug\List\XO.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1090): warning: Register r5 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1091): warning: Register r6 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1092): warning: Register r7 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1093): warning: Register r8 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1094): warning: Register r9 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1095): warning: Register r10 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1096): warning: Register r11 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1097): warning: Register r12 already defined by the .DEF directive
E:\final\Debug\List\XO.asm(1098): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega64
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _key=R4
                 	.DEF _key_msb=R5
                 	.DEF _player=R6
                 	.DEF _player_msb=R7
                 	.DEF _state=R8
                 	.DEF _state_msb=R9
                 	.DEF _count=R10
                 	.DEF _count_msb=R11
                 	.DEF _i=R12
                 	.DEF _i_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 008a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00004f 6552
000050 6461
000051 0079
000052 6f74      	.DB  0x52,0x65,0x61,0x64,0x79,0x0,0x74,0x6F
000053 5300
000054 6174
000055 7472
000056 5800      	.DB  0x0,0x53,0x74,0x61,0x72,0x74,0x0,0x58
000057 5420
000058 7275
000059 006e
00005a 204f      	.DB  0x20,0x54,0x75,0x72,0x6E,0x0,0x4F,0x20
00005b 7554
00005c 6e72
00005d 4f00
00005e 5720      	.DB  0x54,0x75,0x72,0x6E,0x0,0x4F,0x20,0x57
00005f 4e49
000060 454e
000061 2152
000062 5800      	.DB  0x49,0x4E,0x4E,0x45,0x52,0x21,0x0,0x58
000063 5720
000064 4e49
000065 454e
000066 2152      	.DB  0x20,0x57,0x49,0x4E,0x4E,0x45,0x52,0x21
000067 4700
000068 6d61
000069 2065
00006a 764f      	.DB  0x0,0x47,0x61,0x6D,0x65,0x20,0x4F,0x76
00006b 7265
00006c 002e      	.DB  0x65,0x72,0x2E,0x0
                 _0x2000003:
00006d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00006e 0006      	.DW  0x06
00006f 0500      	.DW  _0x54
000070 009e      	.DW  _0x0*2
                 
000071 0003      	.DW  0x03
000072 0506      	.DW  _0x54+6
000073 00a4      	.DW  _0x0*2+6
                 
000074 0006      	.DW  0x06
000075 0509      	.DW  _0x54+9
000076 00a7      	.DW  _0x0*2+9
                 
000077 0007      	.DW  0x07
000078 050f      	.DW  _0x5D
000079 00ad      	.DW  _0x0*2+15
                 
00007a 0007      	.DW  0x07
00007b 0516      	.DW  _0x5D+7
00007c 00b4      	.DW  _0x0*2+22
                 
00007d 000a      	.DW  0x0A
00007e 051d      	.DW  _0x94
00007f 00bb      	.DW  _0x0*2+29
                 
000080 000a      	.DW  0x0A
000081 0527      	.DW  _0x94+10
000082 00c5      	.DW  _0x0*2+39
                 
000083 000b      	.DW  0x0B
000084 0531      	.DW  _0x94+20
000085 00cf      	.DW  _0x0*2+49
                 
000086 0002      	.DW  0x02
000087 0568      	.DW  __base_y_G100
000088 00da      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000089 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00008a 94f8      	CLI
00008b 27ee      	CLR  R30
00008c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008d e0f1      	LDI  R31,1
00008e bff5      	OUT  MCUCR,R31
00008f bfe5      	OUT  MCUCR,R30
000090 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000092 e08d      	LDI  R24,(14-2)+1
000093 e0a2      	LDI  R26,2
000094 27bb      	CLR  R27
                 __CLEAR_REG:
000095 93ed      	ST   X+,R30
000096 958a      	DEC  R24
000097 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000098 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000099 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009a e0a0      	LDI  R26,LOW(__SRAM_START)
00009b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00009c 93ed      	ST   X+,R30
00009d 9701      	SBIW R24,1
00009e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00009f edec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a0 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a1 9185      	LPM  R24,Z+
0000a2 9195      	LPM  R25,Z+
0000a3 9700      	SBIW R24,0
0000a4 f061      	BREQ __GLOBAL_INI_END
0000a5 91a5      	LPM  R26,Z+
0000a6 91b5      	LPM  R27,Z+
0000a7 9005      	LPM  R0,Z+
0000a8 9015      	LPM  R1,Z+
0000a9 01bf      	MOVW R22,R30
0000aa 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ab 9005      	LPM  R0,Z+
0000ac 920d      	ST   X+,R0
0000ad 9701      	SBIW R24,1
0000ae f7e1      	BRNE __GLOBAL_INI_LOOP
0000af 01fb      	MOVW R30,R22
0000b0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b1 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b2 bfed      	OUT  SPL,R30
0000b3 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b5 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b6 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b7 940c 029d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega64.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;int key,game[9]={0},sum[8]={0},player,state,count,i,x,y,j,f=0,s;
                 ;
                 ;int get_key(void){
                 ; 0000 000A int get_key(void){
                 
                 	.CSEG
                 _get_key:
                 ; .FSTART _get_key
                 ; 0000 000B delay_ms(10);
0000b9 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 000C //0 , 1 , 2 , 10(START)
                 ; 0000 000D PORTC=0B11111110;
0000bb efee      	LDI  R30,LOW(254)
0000bc bbe5      	OUT  0x15,R30
                 ; 0000 000E if(PINC.7==0){
0000bd 999f      	SBIC 0x13,7
0000be c009      	RJMP _0x3
                 ; 0000 000F delay_ms(10);
0000bf 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0010 if(PINC.7==0)
0000c1 999f      	SBIC 0x13,7
0000c2 c002      	RJMP _0x4
                 ; 0000 0011 while(!PINC.7){}
                 _0x5:
0000c3 9b9f      	SBIS 0x13,7
0000c4 cffe      	RJMP _0x5
                 ; 0000 0012 return 0;
                 _0x4:
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 e0f0      	LDI  R31,HIGH(0)
0000c7 9508      	RET
                 ; 0000 0013 }
                 ; 0000 0014 if(PINC.6==0){
                 _0x3:
0000c8 999e      	SBIC 0x13,6
0000c9 c009      	RJMP _0x8
                 ; 0000 0015 delay_ms(10);
0000ca 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0016 if(PINC.6==0)
0000cc 999e      	SBIC 0x13,6
0000cd c002      	RJMP _0x9
                 ; 0000 0017 while(!PINC.6){}
                 _0xA:
0000ce 9b9e      	SBIS 0x13,6
0000cf cffe      	RJMP _0xA
                 ; 0000 0018 return 1;
                 _0x9:
0000d0 e0e1      	LDI  R30,LOW(1)
0000d1 e0f0      	LDI  R31,HIGH(1)
0000d2 9508      	RET
                 ; 0000 0019 }
                 ; 0000 001A if(PINC.5==0){
                 _0x8:
0000d3 999d      	SBIC 0x13,5
0000d4 c009      	RJMP _0xD
                 ; 0000 001B delay_ms(10);
0000d5 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 001C if(PINC.5==0)
0000d7 999d      	SBIC 0x13,5
0000d8 c002      	RJMP _0xE
                 ; 0000 001D while(!PINC.5){}
                 _0xF:
0000d9 9b9d      	SBIS 0x13,5
0000da cffe      	RJMP _0xF
                 ; 0000 001E return 2;
                 _0xE:
0000db e0e2      	LDI  R30,LOW(2)
0000dc e0f0      	LDI  R31,HIGH(2)
0000dd 9508      	RET
                 ; 0000 001F }
                 ; 0000 0020 if(PINC.4==0){
                 _0xD:
0000de 999c      	SBIC 0x13,4
0000df c009      	RJMP _0x12
                 ; 0000 0021 delay_ms(10);
0000e0 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0022 if(PINC.4==0)
0000e2 999c      	SBIC 0x13,4
0000e3 c002      	RJMP _0x13
                 ; 0000 0023 while(!PINC.4){}
                 _0x14:
0000e4 9b9c      	SBIS 0x13,4
0000e5 cffe      	RJMP _0x14
                 ; 0000 0024 return 10;
                 _0x13:
0000e6 e0ea      	LDI  R30,LOW(10)
0000e7 e0f0      	LDI  R31,HIGH(10)
0000e8 9508      	RET
                 ; 0000 0025 }
                 ; 0000 0026 
                 ; 0000 0027 //3 , 4 , 5, 11(PAUS)
                 ; 0000 0028 delay_ms(10);
                 _0x12:
0000e9 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0029 PORTC=0B11111101;
0000eb efed      	LDI  R30,LOW(253)
0000ec bbe5      	OUT  0x15,R30
                 ; 0000 002A if(PINC.7==0){
0000ed 999f      	SBIC 0x13,7
0000ee c009      	RJMP _0x17
                 ; 0000 002B delay_ms(10);
0000ef 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 002C if(PINC.7==0)
0000f1 999f      	SBIC 0x13,7
0000f2 c002      	RJMP _0x18
                 ; 0000 002D while(!PINC.7){}
                 _0x19:
0000f3 9b9f      	SBIS 0x13,7
0000f4 cffe      	RJMP _0x19
                 ; 0000 002E return 3;
                 _0x18:
0000f5 e0e3      	LDI  R30,LOW(3)
0000f6 e0f0      	LDI  R31,HIGH(3)
0000f7 9508      	RET
                 ; 0000 002F }
                 ; 0000 0030 if(PINC.6==0){
                 _0x17:
0000f8 999e      	SBIC 0x13,6
0000f9 c009      	RJMP _0x1C
                 ; 0000 0031 delay_ms(10);
0000fa 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0032 if(PINC.6==0)
0000fc 999e      	SBIC 0x13,6
0000fd c002      	RJMP _0x1D
                 ; 0000 0033 while(!PINC.6){}
                 _0x1E:
0000fe 9b9e      	SBIS 0x13,6
0000ff cffe      	RJMP _0x1E
                 ; 0000 0034 return 4;
                 _0x1D:
000100 e0e4      	LDI  R30,LOW(4)
000101 e0f0      	LDI  R31,HIGH(4)
000102 9508      	RET
                 ; 0000 0035 }
                 ; 0000 0036 if(PINC.5==0){
                 _0x1C:
000103 999d      	SBIC 0x13,5
000104 c009      	RJMP _0x21
                 ; 0000 0037 delay_ms(10);
000105 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0038 if(PINC.5==0)
000107 999d      	SBIC 0x13,5
000108 c002      	RJMP _0x22
                 ; 0000 0039 while(!PINC.5){}
                 _0x23:
000109 9b9d      	SBIS 0x13,5
00010a cffe      	RJMP _0x23
                 ; 0000 003A return 5;
                 _0x22:
00010b e0e5      	LDI  R30,LOW(5)
00010c e0f0      	LDI  R31,HIGH(5)
00010d 9508      	RET
                 ; 0000 003B }
                 ; 0000 003C if(PINC.4==0){
                 _0x21:
00010e 999c      	SBIC 0x13,4
00010f c009      	RJMP _0x26
                 ; 0000 003D delay_ms(10);
000110 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 003E if(PINC.4==0)
000112 999c      	SBIC 0x13,4
000113 c002      	RJMP _0x27
                 ; 0000 003F while(!PINC.4){}
                 _0x28:
000114 9b9c      	SBIS 0x13,4
000115 cffe      	RJMP _0x28
                 ; 0000 0040 return 11;
                 _0x27:
000116 e0eb      	LDI  R30,LOW(11)
000117 e0f0      	LDI  R31,HIGH(11)
000118 9508      	RET
                 ; 0000 0041 }
                 ; 0000 0042 
                 ; 0000 0043 //6 , 7 , 8 , 12(RESTART)
                 ; 0000 0044 delay_ms(10);
                 _0x26:
000119 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0045 PORTC=0B11111011;
00011b efeb      	LDI  R30,LOW(251)
00011c bbe5      	OUT  0x15,R30
                 ; 0000 0046 if(PINC.7==0){
00011d 999f      	SBIC 0x13,7
00011e c009      	RJMP _0x2B
                 ; 0000 0047 delay_ms(10);
00011f 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0048 if(PINC.7==0)
000121 999f      	SBIC 0x13,7
000122 c002      	RJMP _0x2C
                 ; 0000 0049 while(!PINC.7){}
                 _0x2D:
000123 9b9f      	SBIS 0x13,7
000124 cffe      	RJMP _0x2D
                 ; 0000 004A return 6;
                 _0x2C:
000125 e0e6      	LDI  R30,LOW(6)
000126 e0f0      	LDI  R31,HIGH(6)
000127 9508      	RET
                 ; 0000 004B }
                 ; 0000 004C if(PINC.6==0){
                 _0x2B:
000128 999e      	SBIC 0x13,6
000129 c009      	RJMP _0x30
                 ; 0000 004D delay_ms(10);
00012a 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 004E if(PINC.6==0)
00012c 999e      	SBIC 0x13,6
00012d c002      	RJMP _0x31
                 ; 0000 004F while(!PINC.6){}
                 _0x32:
00012e 9b9e      	SBIS 0x13,6
00012f cffe      	RJMP _0x32
                 ; 0000 0050 return 7;
                 _0x31:
000130 e0e7      	LDI  R30,LOW(7)
000131 e0f0      	LDI  R31,HIGH(7)
000132 9508      	RET
                 ; 0000 0051 }
                 ; 0000 0052 if(PINC.5==0){
                 _0x30:
000133 999d      	SBIC 0x13,5
000134 c009      	RJMP _0x35
                 ; 0000 0053 delay_ms(10);
000135 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0054 if(PINC.5==0)
000137 999d      	SBIC 0x13,5
000138 c002      	RJMP _0x36
                 ; 0000 0055 while(!PINC.5){}
                 _0x37:
000139 9b9d      	SBIS 0x13,5
00013a cffe      	RJMP _0x37
                 ; 0000 0056 return 8;
                 _0x36:
00013b e0e8      	LDI  R30,LOW(8)
00013c e0f0      	LDI  R31,HIGH(8)
00013d 9508      	RET
                 ; 0000 0057 }
                 ; 0000 0058 if(PINC.4==0){
                 _0x35:
00013e 999c      	SBIC 0x13,4
00013f c009      	RJMP _0x3A
                 ; 0000 0059 delay_ms(10);
000140 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 005A if(PINC.4==0)
000142 999c      	SBIC 0x13,4
000143 c002      	RJMP _0x3B
                 ; 0000 005B while(!PINC.4){}
                 _0x3C:
000144 9b9c      	SBIS 0x13,4
000145 cffe      	RJMP _0x3C
                 ; 0000 005C return 12;
                 _0x3B:
000146 e0ec      	LDI  R30,LOW(12)
000147 e0f0      	LDI  R31,HIGH(12)
000148 9508      	RET
                 ; 0000 005D }
                 ; 0000 005E 
                 ; 0000 005F //16(UNDO) , 15(GIVE UP) , 14(TURN) , 13(STOP)
                 ; 0000 0060 delay_ms(10);
                 _0x3A:
000149 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0061 PORTC=0B11110111;
00014b efe7      	LDI  R30,LOW(247)
00014c bbe5      	OUT  0x15,R30
                 ; 0000 0062 if(PINC.7==0){
00014d 999f      	SBIC 0x13,7
00014e c009      	RJMP _0x3F
                 ; 0000 0063 delay_ms(10);
00014f 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0064 if(PINC.7==0)
000151 999f      	SBIC 0x13,7
000152 c002      	RJMP _0x40
                 ; 0000 0065 while(!PINC.7){}
                 _0x41:
000153 9b9f      	SBIS 0x13,7
000154 cffe      	RJMP _0x41
                 ; 0000 0066 return 16;
                 _0x40:
000155 e1e0      	LDI  R30,LOW(16)
000156 e0f0      	LDI  R31,HIGH(16)
000157 9508      	RET
                 ; 0000 0067 }
                 ; 0000 0068 if(PINC.6==0){
                 _0x3F:
000158 999e      	SBIC 0x13,6
000159 c009      	RJMP _0x44
                 ; 0000 0069 delay_ms(10);
00015a 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 006A if(PINC.6==0)
00015c 999e      	SBIC 0x13,6
00015d c002      	RJMP _0x45
                 ; 0000 006B while(!PINC.6){}
                 _0x46:
00015e 9b9e      	SBIS 0x13,6
00015f cffe      	RJMP _0x46
                 ; 0000 006C return 15;
                 _0x45:
000160 e0ef      	LDI  R30,LOW(15)
000161 e0f0      	LDI  R31,HIGH(15)
000162 9508      	RET
                 ; 0000 006D }
                 ; 0000 006E if(PINC.5==0){
                 _0x44:
000163 999d      	SBIC 0x13,5
000164 c009      	RJMP _0x49
                 ; 0000 006F delay_ms(10);
000165 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0070 if(PINC.5==0)
000167 999d      	SBIC 0x13,5
000168 c002      	RJMP _0x4A
                 ; 0000 0071 while(!PINC.5){}
                 _0x4B:
000169 9b9d      	SBIS 0x13,5
00016a cffe      	RJMP _0x4B
                 ; 0000 0072 return 14;
                 _0x4A:
00016b e0ee      	LDI  R30,LOW(14)
00016c e0f0      	LDI  R31,HIGH(14)
00016d 9508      	RET
                 ; 0000 0073 }
                 ; 0000 0074 if(PINC.4==0){
                 _0x49:
00016e 999c      	SBIC 0x13,4
00016f c009      	RJMP _0x4E
                 ; 0000 0075 delay_ms(10);
000170 940e 042f 	CALL SUBOPT_0x0
                 ; 0000 0076 if(PINC.4==0)
000172 999c      	SBIC 0x13,4
000173 c002      	RJMP _0x4F
                 ; 0000 0077 while(!PINC.4){}
                 _0x50:
000174 9b9c      	SBIS 0x13,4
000175 cffe      	RJMP _0x50
                 ; 0000 0078 return 13;
                 _0x4F:
000176 e0ed      	LDI  R30,LOW(13)
000177 e0f0      	LDI  R31,HIGH(13)
000178 9508      	RET
                 ; 0000 0079 }
                 ; 0000 007A 
                 ; 0000 007B }
                 _0x4E:
000179 9508      	RET
                 ; .FEND
                 ;
                 ;//Initialing
                 ;void get_started(int k){
                 ; 0000 007E void get_started(int k){
                 _get_started:
                 ; .FSTART _get_started
                 ; 0000 007F if(k==1){              //k=1:STOP KEY
00017a 93ba      	ST   -Y,R27
00017b 93aa      	ST   -Y,R26
                 ;	k -> Y+0
00017c 81a8      	LD   R26,Y
00017d 81b9      	LDD  R27,Y+1
00017e 9711      	SBIW R26,1
00017f f519      	BRNE _0x53
                 ; 0000 0080 lcd_clear();
000180 940e 03c1 	CALL _lcd_clear
                 ; 0000 0081 lcd_gotoxy(0,0);
000182 e0e0      	LDI  R30,LOW(0)
000183 93ea      	ST   -Y,R30
000184 e0a0      	LDI  R26,LOW(0)
000185 940e 03b0 	CALL _lcd_gotoxy
                 ; 0000 0082 lcd_puts("Ready");
                +
000187 e0a0     +LDI R26 , LOW ( _0x54 + ( 0 ) )
000188 e0b5     +LDI R27 , HIGH ( _0x54 + ( 0 ) )
                 	__POINTW2MN _0x54,0
000189 940e 03ef 	CALL _lcd_puts
                 ; 0000 0083 lcd_gotoxy(7,1);
00018b e0e7      	LDI  R30,LOW(7)
00018c 940e 0433 	CALL SUBOPT_0x1
                 ; 0000 0084 lcd_puts("to");
                +
00018e e0a6     +LDI R26 , LOW ( _0x54 + ( 6 ) )
00018f e0b5     +LDI R27 , HIGH ( _0x54 + ( 6 ) )
                 	__POINTW2MN _0x54,6
000190 940e 03ef 	CALL _lcd_puts
                 ; 0000 0085 lcd_gotoxy(11,2);
000192 e0eb      	LDI  R30,LOW(11)
000193 93ea      	ST   -Y,R30
000194 e0a2      	LDI  R26,LOW(2)
000195 940e 03b0 	CALL _lcd_gotoxy
                 ; 0000 0086 lcd_puts("Start");
                +
000197 e0a9     +LDI R26 , LOW ( _0x54 + ( 9 ) )
000198 e0b5     +LDI R27 , HIGH ( _0x54 + ( 9 ) )
                 	__POINTW2MN _0x54,9
000199 940e 03ef 	CALL _lcd_puts
                 ; 0000 0087 while(key!=10){
                 _0x55:
00019b e0ea      	LDI  R30,LOW(10)
00019c e0f0      	LDI  R31,HIGH(10)
00019d 15e4      	CP   R30,R4
00019e 05f5      	CPC  R31,R5
00019f f019      	BREQ _0x57
                 ; 0000 0088 key=get_key();
0001a0 df18      	RCALL _get_key
0001a1 012f      	MOVW R4,R30
                 ; 0000 0089 }
0001a2 cff8      	RJMP _0x55
                 _0x57:
                 ; 0000 008A }
                 ; 0000 008B player=0;
                 _0x53:
0001a3 2466      	CLR  R6
0001a4 2477      	CLR  R7
                 ; 0000 008C state=0;
0001a5 2488      	CLR  R8
0001a6 2499      	CLR  R9
                 ; 0000 008D count=0;
0001a7 24aa      	CLR  R10
0001a8 24bb      	CLR  R11
                 ; 0000 008E f=0;
0001a9 940e 0437 	CALL SUBOPT_0x2
                 ; 0000 008F for(i=0;i<9;i++){
0001ab 24cc      	CLR  R12
0001ac 24dd      	CLR  R13
                 _0x59:
0001ad e0e9      	LDI  R30,LOW(9)
0001ae e0f0      	LDI  R31,HIGH(9)
0001af 16ce      	CP   R12,R30
0001b0 06df      	CPC  R13,R31
0001b1 f454      	BRGE _0x5A
                 ; 0000 0090     game[i]=0;
0001b2 940e 043d 	CALL SUBOPT_0x3
0001b4 e0e0      	LDI  R30,LOW(0)
0001b5 e0f0      	LDI  R31,HIGH(0)
0001b6 93ed      	ST   X+,R30
0001b7 93fc      	ST   X,R31
                 ; 0000 0091     }
0001b8 01f6      	MOVW R30,R12
0001b9 9631      	ADIW R30,1
0001ba 016f      	MOVW R12,R30
0001bb cff1      	RJMP _0x59
                 _0x5A:
                 ; 0000 0092 
                 ; 0000 0093 }
0001bc 940c 03bf 	JMP  _0x2080002
                 ; .FEND
                 
                 	.DSEG
                 _0x54:
000500           	.BYTE 0xF
                 ;
                 ;void show(){
                 ; 0000 0095 void show(){
                 
                 	.CSEG
                 _show:
                 ; .FSTART _show
                 ; 0000 0096 lcd_clear();
0001be 940e 03c1 	CALL _lcd_clear
                 ; 0000 0097 x=y=0;
0001c0 e0e0      	LDI  R30,LOW(0)
0001c1 e0f0      	LDI  R31,HIGH(0)
0001c2 93e0 0560 	STS  _y,R30
0001c4 93f0 0561 	STS  _y+1,R31
0001c6 93e0 055e 	STS  _x,R30
0001c8 93f0 055f 	STS  _x+1,R31
                 ; 0000 0098 if(f==1){                   //f=1:TURN KEY
0001ca 91a0 0564 	LDS  R26,_f
0001cc 91b0 0565 	LDS  R27,_f+1
0001ce 9711      	SBIW R26,1
0001cf f481      	BRNE _0x5B
                 ; 0000 0099     if(player==0){
0001d0 2c06      	MOV  R0,R6
0001d1 2807      	OR   R0,R7
0001d2 f431      	BRNE _0x5C
                 ; 0000 009A     lcd_gotoxy(9,1);
0001d3 e0e9      	LDI  R30,LOW(9)
0001d4 940e 0433 	CALL SUBOPT_0x1
                 ; 0000 009B     lcd_puts("X Turn");
                +
0001d6 e0af     +LDI R26 , LOW ( _0x5D + ( 0 ) )
0001d7 e0b5     +LDI R27 , HIGH ( _0x5D + ( 0 ) )
                 	__POINTW2MN _0x5D,0
0001d8 c005      	RJMP _0x9D
                 ; 0000 009C     }
                 ; 0000 009D     else{
                 _0x5C:
                 ; 0000 009E     lcd_gotoxy(9,1);
0001d9 e0e9      	LDI  R30,LOW(9)
0001da 940e 0433 	CALL SUBOPT_0x1
                 ; 0000 009F     lcd_puts("O Turn");
                +
0001dc e1a6     +LDI R26 , LOW ( _0x5D + ( 7 ) )
0001dd e0b5     +LDI R27 , HIGH ( _0x5D + ( 7 ) )
                 	__POINTW2MN _0x5D,7
                 _0x9D:
0001de 940e 03ef 	CALL _lcd_puts
                 ; 0000 00A0     }
                 ; 0000 00A1 }
                 ; 0000 00A2 
                 ; 0000 00A3 for(i=0;i<9;i++)
                 _0x5B:
0001e0 24cc      	CLR  R12
0001e1 24dd      	CLR  R13
                 _0x60:
0001e2 e0e9      	LDI  R30,LOW(9)
0001e3 e0f0      	LDI  R31,HIGH(9)
0001e4 16ce      	CP   R12,R30
0001e5 06df      	CPC  R13,R31
0001e6 f00c      	BRLT PC+2
0001e7 c03f      	RJMP _0x61
                 ; 0000 00A4     {
                 ; 0000 00A5     if(i%3==0 && i!=0){
0001e8 01d6      	MOVW R26,R12
0001e9 e0e3      	LDI  R30,LOW(3)
0001ea e0f0      	LDI  R31,HIGH(3)
0001eb 940e 04b4 	CALL __MODW21
0001ed 9730      	SBIW R30,0
0001ee f421      	BRNE _0x63
0001ef 2400      	CLR  R0
0001f0 140c      	CP   R0,R12
0001f1 040d      	CPC  R0,R13
0001f2 f409      	BRNE _0x64
                 _0x63:
0001f3 c00e      	RJMP _0x62
                 _0x64:
                 ; 0000 00A6         y+=1;
0001f4 91e0 0560 	LDS  R30,_y
0001f6 91f0 0561 	LDS  R31,_y+1
0001f8 9631      	ADIW R30,1
0001f9 93e0 0560 	STS  _y,R30
0001fb 93f0 0561 	STS  _y+1,R31
                 ; 0000 00A7         x=0;
0001fd e0e0      	LDI  R30,LOW(0)
0001fe 93e0 055e 	STS  _x,R30
000200 93e0 055f 	STS  _x+1,R30
                 ; 0000 00A8         }
                 ; 0000 00A9     lcd_gotoxy(x,y);
                 _0x62:
000202 91e0 055e 	LDS  R30,_x
000204 93ea      	ST   -Y,R30
000205 91a0 0560 	LDS  R26,_y
000207 d1a8      	RCALL _lcd_gotoxy
                 ; 0000 00AA     switch (game[i]){
000208 940e 043d 	CALL SUBOPT_0x3
00020a 940e 04c2 	CALL __GETW1P
                 ; 0000 00AB     case 0:
00020c 9730      	SBIW R30,0
00020d f411      	BRNE _0x68
                 ; 0000 00AC     lcd_putchar('-');
00020e e2ad      	LDI  R26,LOW(45)
00020f c00b      	RJMP _0x9E
                 ; 0000 00AD     break;
                 ; 0000 00AE 
                 ; 0000 00AF     case 1:
                 _0x68:
000210 30e1      	CPI  R30,LOW(0x1)
000211 e0a0      	LDI  R26,HIGH(0x1)
000212 07fa      	CPC  R31,R26
000213 f411      	BRNE _0x69
                 ; 0000 00B0     lcd_putchar('X');
000214 e5a8      	LDI  R26,LOW(88)
000215 c005      	RJMP _0x9E
                 ; 0000 00B1     break;
                 ; 0000 00B2 
                 ; 0000 00B3     case -1:
                 _0x69:
000216 3fef      	CPI  R30,LOW(0xFFFFFFFF)
000217 efaf      	LDI  R26,HIGH(0xFFFFFFFF)
000218 07fa      	CPC  R31,R26
000219 f411      	BRNE _0x67
                 ; 0000 00B4     lcd_putchar('O');
00021a e4af      	LDI  R26,LOW(79)
                 _0x9E:
00021b d1b3      	RCALL _lcd_putchar
                 ; 0000 00B5     break;
                 ; 0000 00B6     }
                 _0x67:
                 ; 0000 00B7     x++;
00021c e5ae      	LDI  R26,LOW(_x)
00021d e0b5      	LDI  R27,HIGH(_x)
00021e 91ed      	LD   R30,X+
00021f 91fd      	LD   R31,X+
000220 9631      	ADIW R30,1
000221 93fe      	ST   -X,R31
000222 93ee      	ST   -X,R30
                 ; 0000 00B8     }
000223 01f6      	MOVW R30,R12
000224 9631      	ADIW R30,1
000225 016f      	MOVW R12,R30
000226 cfbb      	RJMP _0x60
                 _0x61:
                 ; 0000 00B9 }
000227 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x5D:
00050f           	.BYTE 0xE
                 ;
                 ;void winner_check(){
                 ; 0000 00BB void winner_check(){
                 
                 	.CSEG
                 _winner_check:
                 ; .FSTART _winner_check
                 ; 0000 00BC sum[0]=game[0]+game[1]+game[2];
                +
000228 91e0 053e+LDS R30 , _game + ( 2 )
00022a 91f0 053f+LDS R31 , _game + ( 2 ) + 1
                 	__GETW1MN _game,2
00022c 940e 0445 	CALL SUBOPT_0x4
                +
00022e 91e0 0540+LDS R30 , _game + ( 4 )
000230 91f0 0541+LDS R31 , _game + ( 4 ) + 1
                 	__GETW1MN _game,4
000232 0fea      	ADD  R30,R26
000233 1ffb      	ADC  R31,R27
000234 93e0 054e 	STS  _sum,R30
000236 93f0 054f 	STS  _sum+1,R31
                 ; 0000 00BD sum[1]=game[3]+game[4]+game[5];
                +
000238 91a0 0542+LDS R26 , _game + ( 6 )
00023a 91b0 0543+LDS R27 , _game + ( 6 ) + 1
                 	__GETW2MN _game,6
00023c 940e 044c 	CALL SUBOPT_0x5
                +
00023e 91e0 0546+LDS R30 , _game + ( 10 )
000240 91f0 0547+LDS R31 , _game + ( 10 ) + 1
                 	__GETW1MN _game,10
000242 0fea      	ADD  R30,R26
000243 1ffb      	ADC  R31,R27
                +
000244 93e0 0550+STS _sum + ( 2 ) , R30
000246 93f0 0551+STS _sum + ( 2 ) + 1 , R31
                 	__PUTW1MN _sum,2
                 ; 0000 00BE sum[2]=game[6]+game[7]+game[8];
                +
000248 91a0 0548+LDS R26 , _game + ( 12 )
00024a 91b0 0549+LDS R27 , _game + ( 12 ) + 1
                 	__GETW2MN _game,12
                +
00024c 91e0 054a+LDS R30 , _game + ( 14 )
00024e 91f0 054b+LDS R31 , _game + ( 14 ) + 1
                 	__GETW1MN _game,14
000250 940e 0453 	CALL SUBOPT_0x6
                +
000252 93e0 0552+STS _sum + ( 4 ) , R30
000254 93f0 0553+STS _sum + ( 4 ) + 1 , R31
                 	__PUTW1MN _sum,4
                 ; 0000 00BF sum[3]=game[0]+game[3]+game[6];
                +
000256 91e0 0542+LDS R30 , _game + ( 6 )
000258 91f0 0543+LDS R31 , _game + ( 6 ) + 1
                 	__GETW1MN _game,6
00025a 940e 0445 	CALL SUBOPT_0x4
00025c 940e 045c 	CALL SUBOPT_0x7
                +
00025e 93e0 0554+STS _sum + ( 6 ) , R30
000260 93f0 0555+STS _sum + ( 6 ) + 1 , R31
                 	__PUTW1MN _sum,6
                 ; 0000 00C0 sum[4]=game[1]+game[4]+game[7];
                +
000262 91a0 053e+LDS R26 , _game + ( 2 )
000264 91b0 053f+LDS R27 , _game + ( 2 ) + 1
                 	__GETW2MN _game,2
000266 940e 044c 	CALL SUBOPT_0x5
                +
000268 91e0 054a+LDS R30 , _game + ( 14 )
00026a 91f0 054b+LDS R31 , _game + ( 14 ) + 1
                 	__GETW1MN _game,14
00026c 0fea      	ADD  R30,R26
00026d 1ffb      	ADC  R31,R27
                +
00026e 93e0 0556+STS _sum + ( 8 ) , R30
000270 93f0 0557+STS _sum + ( 8 ) + 1 , R31
                 	__PUTW1MN _sum,8
                 ; 0000 00C1 sum[5]=game[2]+game[5]+game[8];
                +
000272 91a0 0540+LDS R26 , _game + ( 4 )
000274 91b0 0541+LDS R27 , _game + ( 4 ) + 1
                 	__GETW2MN _game,4
                +
000276 91e0 0546+LDS R30 , _game + ( 10 )
000278 91f0 0547+LDS R31 , _game + ( 10 ) + 1
                 	__GETW1MN _game,10
00027a 940e 0453 	CALL SUBOPT_0x6
                +
00027c 93e0 0558+STS _sum + ( 10 ) , R30
00027e 93f0 0559+STS _sum + ( 10 ) + 1 , R31
                 	__PUTW1MN _sum,10
                 ; 0000 00C2 sum[6]=game[0]+game[4]+game[8];
                +
000280 91e0 0544+LDS R30 , _game + ( 8 )
000282 91f0 0545+LDS R31 , _game + ( 8 ) + 1
                 	__GETW1MN _game,8
000284 940e 0445 	CALL SUBOPT_0x4
                +
000286 91e0 054c+LDS R30 , _game + ( 16 )
000288 91f0 054d+LDS R31 , _game + ( 16 ) + 1
                 	__GETW1MN _game,16
00028a 0fea      	ADD  R30,R26
00028b 1ffb      	ADC  R31,R27
                +
00028c 93e0 055a+STS _sum + ( 12 ) , R30
00028e 93f0 055b+STS _sum + ( 12 ) + 1 , R31
                 	__PUTW1MN _sum,12
                 ; 0000 00C3 sum[7]=game[2]+game[4]+game[6];
                +
000290 91a0 0540+LDS R26 , _game + ( 4 )
000292 91b0 0541+LDS R27 , _game + ( 4 ) + 1
                 	__GETW2MN _game,4
000294 940e 044c 	CALL SUBOPT_0x5
000296 940e 045c 	CALL SUBOPT_0x7
                +
000298 93e0 055c+STS _sum + ( 14 ) , R30
00029a 93f0 055d+STS _sum + ( 14 ) + 1 , R31
                 	__PUTW1MN _sum,14
                 ; 0000 00C4 }
00029c 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00C7 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00C8 DDRC=0X0F;             //PORTC For Keypad HIGH Nibble Input,Low Nibble Output
00029d e0ef      	LDI  R30,LOW(15)
00029e bbe4      	OUT  0x14,R30
                 ; 0000 00C9 PORTC=0XF0;            //PORTC For Keypad HIGH Nibble Input,Pull-Up Low Nibble Output Zero
00029f efe0      	LDI  R30,LOW(240)
0002a0 bbe5      	OUT  0x15,R30
                 ; 0000 00CA 
                 ; 0000 00CB DDRE=0xF7;             //PORTD Output
0002a1 efe7      	LDI  R30,LOW(247)
0002a2 b9e2      	OUT  0x2,R30
                 ; 0000 00CC 
                 ; 0000 00CD lcd_init(16);
0002a3 e1a0      	LDI  R26,LOW(16)
0002a4 d15b      	RCALL _lcd_init
                 ; 0000 00CE 
                 ; 0000 00CF get_started(1);
0002a5 940e 0463 	CALL SUBOPT_0x8
                 ; 0000 00D0 
                 ; 0000 00D1 Label:
                 _0x6B:
                 ; 0000 00D2 while(state==0){
                 _0x6C:
0002a7 2c08      	MOV  R0,R8
0002a8 2809      	OR   R0,R9
0002a9 f009      	BREQ PC+2
0002aa c0cc      	RJMP _0x6E
                 ; 0000 00D3     key=get_key();
0002ab 940e 0467 	CALL SUBOPT_0x9
                 ; 0000 00D4     if(key==11){        //PAUSE
0002ad f4b1      	BRNE _0x6F
                 ; 0000 00D5     j=0;
0002ae e0e0      	LDI  R30,LOW(0)
0002af 93e0 0562 	STS  _j,R30
0002b1 93e0 0563 	STS  _j+1,R30
                 ; 0000 00D6     while(j==0){
                 _0x70:
0002b3 91e0 0562 	LDS  R30,_j
0002b5 91f0 0563 	LDS  R31,_j+1
0002b7 9730      	SBIW R30,0
0002b8 f451      	BRNE _0x72
                 ; 0000 00D7     key=get_key();
0002b9 940e 0467 	CALL SUBOPT_0x9
                 ; 0000 00D8     if(key==11)
0002bb f431      	BRNE _0x73
                 ; 0000 00D9         j=1;
0002bc e0e1      	LDI  R30,LOW(1)
0002bd e0f0      	LDI  R31,HIGH(1)
0002be 93e0 0562 	STS  _j,R30
0002c0 93f0 0563 	STS  _j+1,R31
                 ; 0000 00DA     }}
                 _0x73:
0002c2 cff0      	RJMP _0x70
                 _0x72:
                 ; 0000 00DB 
                 ; 0000 00DC     else if(key==12){   //RESTART
0002c3 c040      	RJMP _0x74
                 _0x6F:
0002c4 e0ec      	LDI  R30,LOW(12)
0002c5 e0f0      	LDI  R31,HIGH(12)
0002c6 15e4      	CP   R30,R4
0002c7 05f5      	CPC  R31,R5
0002c8 f421      	BRNE _0x75
                 ; 0000 00DD     get_started(0);
0002c9 e0a0      	LDI  R26,LOW(0)
0002ca e0b0      	LDI  R27,0
0002cb deae      	RCALL _get_started
                 ; 0000 00DE     }
                 ; 0000 00DF 
                 ; 0000 00E0     else if(key==13){   //STOP
0002cc c037      	RJMP _0x76
                 _0x75:
0002cd e0ed      	LDI  R30,LOW(13)
0002ce e0f0      	LDI  R31,HIGH(13)
0002cf 15e4      	CP   R30,R4
0002d0 05f5      	CPC  R31,R5
0002d1 f419      	BRNE _0x77
                 ; 0000 00E1     get_started(1);
0002d2 940e 0463 	CALL SUBOPT_0x8
                 ; 0000 00E2     }
                 ; 0000 00E3 
                 ; 0000 00E4     else if(key==14){   //TURN
0002d4 c02f      	RJMP _0x78
                 _0x77:
0002d5 e0ee      	LDI  R30,LOW(14)
0002d6 e0f0      	LDI  R31,HIGH(14)
0002d7 15e4      	CP   R30,R4
0002d8 05f5      	CPC  R31,R5
0002d9 f439      	BRNE _0x79
                 ; 0000 00E5     f=1;
0002da e0e1      	LDI  R30,LOW(1)
0002db e0f0      	LDI  R31,HIGH(1)
0002dc 93e0 0564 	STS  _f,R30
0002de 93f0 0565 	STS  _f+1,R31
                 ; 0000 00E6     }
                 ; 0000 00E7 
                 ; 0000 00E8     else if(key==15){   //GIVE UP
0002e0 c023      	RJMP _0x7A
                 _0x79:
0002e1 e0ef      	LDI  R30,LOW(15)
0002e2 e0f0      	LDI  R31,HIGH(15)
0002e3 15e4      	CP   R30,R4
0002e4 05f5      	CPC  R31,R5
0002e5 f451      	BRNE _0x7B
                 ; 0000 00E9         if(player==0)
0002e6 2c06      	MOV  R0,R6
0002e7 2807      	OR   R0,R7
0002e8 f419      	BRNE _0x7C
                 ; 0000 00EA             state=-1;
0002e9 efef      	LDI  R30,LOW(65535)
0002ea efff      	LDI  R31,HIGH(65535)
0002eb c002      	RJMP _0x9F
                 ; 0000 00EB         else
                 _0x7C:
                 ; 0000 00EC             state=1;
0002ec e0e1      	LDI  R30,LOW(1)
0002ed e0f0      	LDI  R31,HIGH(1)
                 _0x9F:
0002ee 014f      	MOVW R8,R30
                 ; 0000 00ED     }
                 ; 0000 00EE 
                 ; 0000 00EF     else if(key==16){   //UNDO
0002ef c014      	RJMP _0x7E
                 _0x7B:
0002f0 e1e0      	LDI  R30,LOW(16)
0002f1 e0f0      	LDI  R31,HIGH(16)
0002f2 15e4      	CP   R30,R4
0002f3 05f5      	CPC  R31,R5
0002f4 f479      	BRNE _0x7F
                 ; 0000 00F0         player=!player;
0002f5 01f3      	MOVW R30,R6
0002f6 940e 049c 	CALL __LNEGW1
0002f8 2e6e      	MOV  R6,R30
0002f9 2477      	CLR  R7
                 ; 0000 00F1         game[s]=0;
0002fa 91e0 0566 	LDS  R30,_s
0002fc 91f0 0567 	LDS  R31,_s+1
0002fe 940e 046f 	CALL SUBOPT_0xA
000300 e0e0      	LDI  R30,LOW(0)
000301 e0f0      	LDI  R31,HIGH(0)
000302 93ed      	ST   X+,R30
000303 93fc      	ST   X,R31
                 ; 0000 00F2     }
                 ; 0000 00F3 
                 ; 0000 00F4     if(key<9){
                 _0x7F:
                 _0x7E:
                 _0x7A:
                 _0x78:
                 _0x76:
                 _0x74:
000304 e0e9      	LDI  R30,LOW(9)
000305 e0f0      	LDI  R31,HIGH(9)
000306 164e      	CP   R4,R30
000307 065f      	CPC  R5,R31
000308 f53c      	BRGE _0x80
                 ; 0000 00F5         if(game[key]==0){
000309 01f2      	MOVW R30,R4
00030a 940e 046f 	CALL SUBOPT_0xA
00030c 940e 04c2 	CALL __GETW1P
00030e 9730      	SBIW R30,0
00030f f501      	BRNE _0x81
                 ; 0000 00F6             s=key;
                +
000310 9240 0566+STS _s + ( 0 ) , R4
000312 9250 0567+STS _s + ( 0 ) + 1 , R5
                 	__PUTWMRN _s,0,4,5
                 ; 0000 00F7             switch (player){
000314 01f3      	MOVW R30,R6
                 ; 0000 00F8             case 0:
000315 9730      	SBIW R30,0
000316 f431      	BRNE _0x85
                 ; 0000 00F9             game[key]=1;
000317 01f2      	MOVW R30,R4
000318 940e 046f 	CALL SUBOPT_0xA
00031a e0e1      	LDI  R30,LOW(1)
00031b e0f0      	LDI  R31,HIGH(1)
00031c c009      	RJMP _0xA0
                 ; 0000 00FA             break;
                 ; 0000 00FB 
                 ; 0000 00FC             case 1:
                 _0x85:
00031d 30e1      	CPI  R30,LOW(0x1)
00031e e0a0      	LDI  R26,HIGH(0x1)
00031f 07fa      	CPC  R31,R26
000320 f439      	BRNE _0x84
                 ; 0000 00FD             game[key]=-1;
000321 01f2      	MOVW R30,R4
000322 940e 046f 	CALL SUBOPT_0xA
000324 efef      	LDI  R30,LOW(65535)
000325 efff      	LDI  R31,HIGH(65535)
                 _0xA0:
000326 93ed      	ST   X+,R30
000327 93fc      	ST   X,R31
                 ; 0000 00FE             break;
                 ; 0000 00FF             }
                 _0x84:
                 ; 0000 0100             count++;
000328 01f5      	MOVW R30,R10
000329 9631      	ADIW R30,1
00032a 015f      	MOVW R10,R30
                 ; 0000 0101             player=!player;
00032b 01f3      	MOVW R30,R6
00032c 940e 049c 	CALL __LNEGW1
00032e 2e6e      	MOV  R6,R30
00032f 2477      	CLR  R7
                 ; 0000 0102      }   }
                 _0x81:
                 ; 0000 0103 show();
                 _0x80:
000330 de8d      	RCALL _show
                 ; 0000 0104 
                 ; 0000 0105 winner_check();
000331 def6      	RCALL _winner_check
                 ; 0000 0106 
                 ; 0000 0107 for(i=0;i<8;i++){
000332 24cc      	CLR  R12
000333 24dd      	CLR  R13
                 _0x88:
000334 e0e8      	LDI  R30,LOW(8)
000335 e0f0      	LDI  R31,HIGH(8)
000336 16ce      	CP   R12,R30
000337 06df      	CPC  R13,R31
000338 f51c      	BRGE _0x89
                 ; 0000 0108 if(sum[i]==3)
000339 940e 0476 	CALL SUBOPT_0xB
00033b 30e3      	CPI  R30,LOW(0x3)
00033c e0a0      	LDI  R26,HIGH(0x3)
00033d 07fa      	CPC  R31,R26
00033e f419      	BRNE _0x8A
                 ; 0000 0109     state=1;
00033f e0e1      	LDI  R30,LOW(1)
000340 e0f0      	LDI  R31,HIGH(1)
000341 c008      	RJMP _0xA1
                 ; 0000 010A 
                 ; 0000 010B else if(sum[i]==-3)
                 _0x8A:
000342 940e 0476 	CALL SUBOPT_0xB
000344 3fed      	CPI  R30,LOW(0xFFFD)
000345 efaf      	LDI  R26,HIGH(0xFFFD)
000346 07fa      	CPC  R31,R26
000347 f419      	BRNE _0x8C
                 ; 0000 010C     state=-1;
000348 efef      	LDI  R30,LOW(65535)
000349 efff      	LDI  R31,HIGH(65535)
                 _0xA1:
00034a 014f      	MOVW R8,R30
                 ; 0000 010D 
                 ; 0000 010E if(count==9 && state==0)
                 _0x8C:
00034b e0e9      	LDI  R30,LOW(9)
00034c e0f0      	LDI  R31,HIGH(9)
00034d 15ea      	CP   R30,R10
00034e 05fb      	CPC  R31,R11
00034f f421      	BRNE _0x8E
000350 2400      	CLR  R0
000351 1408      	CP   R0,R8
000352 0409      	CPC  R0,R9
000353 f009      	BREQ _0x8F
                 _0x8E:
000354 c003      	RJMP _0x8D
                 _0x8F:
                 ; 0000 010F     state=2;
000355 e0e2      	LDI  R30,LOW(2)
000356 e0f0      	LDI  R31,HIGH(2)
000357 014f      	MOVW R8,R30
                 ; 0000 0110 }
                 _0x8D:
000358 01f6      	MOVW R30,R12
000359 9631      	ADIW R30,1
00035a 016f      	MOVW R12,R30
00035b cfd8      	RJMP _0x88
                 _0x89:
                 ; 0000 0111 
                 ; 0000 0112 lcd_gotoxy(4,3);
00035c e0e4      	LDI  R30,LOW(4)
00035d 93ea      	ST   -Y,R30
00035e e0a3      	LDI  R26,LOW(3)
00035f d050      	RCALL _lcd_gotoxy
                 ; 0000 0113 switch (state){
000360 01f4      	MOVW R30,R8
                 ; 0000 0114     case -1:
000361 3fef      	CPI  R30,LOW(0xFFFFFFFF)
000362 efaf      	LDI  R26,HIGH(0xFFFFFFFF)
000363 07fa      	CPC  R31,R26
000364 f419      	BRNE _0x93
                 ; 0000 0115     lcd_puts("O WINNER!");
                +
000365 e1ad     +LDI R26 , LOW ( _0x94 + ( 0 ) )
000366 e0b5     +LDI R27 , HIGH ( _0x94 + ( 0 ) )
                 	__POINTW2MN _0x94,0
000367 c00d      	RJMP _0xA2
                 ; 0000 0116     break;
                 ; 0000 0117 
                 ; 0000 0118     case 1:
                 _0x93:
000368 30e1      	CPI  R30,LOW(0x1)
000369 e0a0      	LDI  R26,HIGH(0x1)
00036a 07fa      	CPC  R31,R26
00036b f419      	BRNE _0x95
                 ; 0000 0119     lcd_puts("X WINNER!");
                +
00036c e2a7     +LDI R26 , LOW ( _0x94 + ( 10 ) )
00036d e0b5     +LDI R27 , HIGH ( _0x94 + ( 10 ) )
                 	__POINTW2MN _0x94,10
00036e c006      	RJMP _0xA2
                 ; 0000 011A     break;
                 ; 0000 011B 
                 ; 0000 011C     case 2:
                 _0x95:
00036f 30e2      	CPI  R30,LOW(0x2)
000370 e0a0      	LDI  R26,HIGH(0x2)
000371 07fa      	CPC  R31,R26
000372 f419      	BRNE _0x92
                 ; 0000 011D     lcd_puts("Game Over.");
                +
000373 e3a1     +LDI R26 , LOW ( _0x94 + ( 20 ) )
000374 e0b5     +LDI R27 , HIGH ( _0x94 + ( 20 ) )
                 	__POINTW2MN _0x94,20
                 _0xA2:
000375 d079      	RCALL _lcd_puts
                 ; 0000 011E     break;
                 ; 0000 011F     }
                 _0x92:
                 ; 0000 0120 }
000376 cf30      	RJMP _0x6C
                 _0x6E:
                 ; 0000 0121 
                 ; 0000 0122 while (1)
                 _0x97:
                 ; 0000 0123     {
                 ; 0000 0124     key=get_key();
000377 dd41      	RCALL _get_key
000378 012f      	MOVW R4,R30
                 ; 0000 0125     if(key==12){
000379 e0ec      	LDI  R30,LOW(12)
00037a e0f0      	LDI  R31,HIGH(12)
00037b 15e4      	CP   R30,R4
00037c 05f5      	CPC  R31,R5
00037d f431      	BRNE _0x9A
                 ; 0000 0126         get_started(0);
00037e e0a0      	LDI  R26,LOW(0)
00037f e0b0      	LDI  R27,0
000380 ddf9      	RCALL _get_started
                 ; 0000 0127         f=0;
000381 940e 0437 	CALL SUBOPT_0x2
                 ; 0000 0128         goto Label;
000383 cf23      	RJMP _0x6B
                 ; 0000 0129     }
                 ; 0000 012A     if(key==13){
                 _0x9A:
000384 e0ed      	LDI  R30,LOW(13)
000385 e0f0      	LDI  R31,HIGH(13)
000386 15e4      	CP   R30,R4
000387 05f5      	CPC  R31,R5
000388 f429      	BRNE _0x9B
                 ; 0000 012B         get_started(1);
000389 940e 0463 	CALL SUBOPT_0x8
                 ; 0000 012C         f=0;
00038b 940e 0437 	CALL SUBOPT_0x2
                 ; 0000 012D         goto Label;
00038d cf19      	RJMP _0x6B
                 ; 0000 012E     }
                 ; 0000 012F     }
                 _0x9B:
00038e cfe8      	RJMP _0x97
                 ; 0000 0130 }
                 _0x9C:
00038f cfff      	RJMP _0x9C
                 ; .FEND
                 
                 	.DSEG
                 _0x94:
00051d           	.BYTE 0x1F
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000390 93aa      	ST   -Y,R26
000391 b1e3      	IN   R30,0x3
000392 70ef      	ANDI R30,LOW(0xF)
000393 2fae      	MOV  R26,R30
000394 81e8      	LD   R30,Y
000395 7fe0      	ANDI R30,LOW(0xF0)
000396 2bea      	OR   R30,R26
000397 b9e3      	OUT  0x3,R30
                +
000398 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000399 958a     +DEC R24
00039a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00039b 9a1a      	SBI  0x3,2
                +
00039c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00039d 958a     +DEC R24
00039e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00039f 981a      	CBI  0x3,2
                +
0003a0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003a1 958a     +DEC R24
0003a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003a3 c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0003a4 93aa      	ST   -Y,R26
0003a5 81a8      	LD   R26,Y
0003a6 dfe9      	RCALL __lcd_write_nibble_G100
0003a7 81e8          ld    r30,y
0003a8 95e2          swap  r30
0003a9 83e8          st    y,r30
0003aa 81a8      	LD   R26,Y
0003ab dfe4      	RCALL __lcd_write_nibble_G100
                +
0003ac e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0003ad 958a     +DEC R24
0003ae f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0003af c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0003b0 93aa      	ST   -Y,R26
0003b1 81e8      	LD   R30,Y
0003b2 e0f0      	LDI  R31,0
0003b3 59e8      	SUBI R30,LOW(-__base_y_G100)
0003b4 4ffa      	SBCI R31,HIGH(-__base_y_G100)
0003b5 81e0      	LD   R30,Z
0003b6 81a9      	LDD  R26,Y+1
0003b7 0fae      	ADD  R26,R30
0003b8 dfeb      	RCALL __lcd_write_data
0003b9 81e9      	LDD  R30,Y+1
0003ba 93e0 056c 	STS  __lcd_x,R30
0003bc 81e8      	LD   R30,Y
0003bd 93e0 056d 	STS  __lcd_y,R30
                 _0x2080002:
0003bf 9622      	ADIW R28,2
0003c0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0003c1 e0a2      	LDI  R26,LOW(2)
0003c2 940e 0480 	CALL SUBOPT_0xC
0003c4 e0ac      	LDI  R26,LOW(12)
0003c5 dfde      	RCALL __lcd_write_data
0003c6 e0a1      	LDI  R26,LOW(1)
0003c7 940e 0480 	CALL SUBOPT_0xC
0003c9 e0e0      	LDI  R30,LOW(0)
0003ca 93e0 056d 	STS  __lcd_y,R30
0003cc 93e0 056c 	STS  __lcd_x,R30
0003ce 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0003cf 93aa      	ST   -Y,R26
0003d0 81a8      	LD   R26,Y
0003d1 30aa      	CPI  R26,LOW(0xA)
0003d2 f031      	BREQ _0x2000005
0003d3 91e0 056e 	LDS  R30,__lcd_maxx
0003d5 91a0 056c 	LDS  R26,__lcd_x
0003d7 17ae      	CP   R26,R30
0003d8 f060      	BRLO _0x2000004
                 _0x2000005:
0003d9 e0e0      	LDI  R30,LOW(0)
0003da 93ea      	ST   -Y,R30
0003db 91a0 056d 	LDS  R26,__lcd_y
0003dd 5faf      	SUBI R26,-LOW(1)
0003de 93a0 056d 	STS  __lcd_y,R26
0003e0 dfcf      	RCALL _lcd_gotoxy
0003e1 81a8      	LD   R26,Y
0003e2 30aa      	CPI  R26,LOW(0xA)
0003e3 f409      	BRNE _0x2000007
0003e4 c048      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
0003e5 91e0 056c 	LDS  R30,__lcd_x
0003e7 5fef      	SUBI R30,-LOW(1)
0003e8 93e0 056c 	STS  __lcd_x,R30
0003ea 9a18      	SBI  0x3,0
0003eb 81a8      	LD   R26,Y
0003ec dfb7      	RCALL __lcd_write_data
0003ed 9818      	CBI  0x3,0
0003ee c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0003ef 93ba      	ST   -Y,R27
0003f0 93aa      	ST   -Y,R26
0003f1 931a      	ST   -Y,R17
                 _0x2000008:
0003f2 81a9      	LDD  R26,Y+1
0003f3 81ba      	LDD  R27,Y+1+1
0003f4 91ed      	LD   R30,X+
0003f5 83a9      	STD  Y+1,R26
0003f6 83ba      	STD  Y+1+1,R27
0003f7 2f1e      	MOV  R17,R30
0003f8 30e0      	CPI  R30,0
0003f9 f019      	BREQ _0x200000A
0003fa 2fa1      	MOV  R26,R17
0003fb dfd3      	RCALL _lcd_putchar
0003fc cff5      	RJMP _0x2000008
                 _0x200000A:
0003fd 8118      	LDD  R17,Y+0
0003fe 9623      	ADIW R28,3
0003ff 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000400 93aa      	ST   -Y,R26
000401 b1e2      	IN   R30,0x2
000402 6fe0      	ORI  R30,LOW(0xF0)
000403 b9e2      	OUT  0x2,R30
000404 9a12      	SBI  0x2,2
000405 9a10      	SBI  0x2,0
000406 9a11      	SBI  0x2,1
000407 981a      	CBI  0x3,2
000408 9818      	CBI  0x3,0
000409 9819      	CBI  0x3,1
00040a 81e8      	LD   R30,Y
00040b 93e0 056e 	STS  __lcd_maxx,R30
00040d 58e0      	SUBI R30,-LOW(128)
                +
00040e 93e0 056a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000410 81e8      	LD   R30,Y
000411 54e0      	SUBI R30,-LOW(192)
                +
000412 93e0 056b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000414 e1a4      	LDI  R26,LOW(20)
000415 e0b0      	LDI  R27,0
000416 940e 048e 	CALL _delay_ms
000418 940e 0486 	CALL SUBOPT_0xD
00041a 940e 0486 	CALL SUBOPT_0xD
00041c 940e 0486 	CALL SUBOPT_0xD
00041e e2a0      	LDI  R26,LOW(32)
00041f df70      	RCALL __lcd_write_nibble_G100
                +
000420 ec88     +LDI R24 , LOW ( 200 )
000421 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000422 9701     +SBIW R24 , 1
000423 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000424 e2a8      	LDI  R26,LOW(40)
000425 df7e      	RCALL __lcd_write_data
000426 e0a4      	LDI  R26,LOW(4)
000427 df7c      	RCALL __lcd_write_data
000428 e8a5      	LDI  R26,LOW(133)
000429 df7a      	RCALL __lcd_write_data
00042a e0a6      	LDI  R26,LOW(6)
00042b df78      	RCALL __lcd_write_data
00042c df94      	RCALL _lcd_clear
                 _0x2080001:
00042d 9621      	ADIW R28,1
00042e 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _game:
00053c           	.BYTE 0x12
                 _sum:
00054e           	.BYTE 0x10
                 _x:
00055e           	.BYTE 0x2
                 _y:
000560           	.BYTE 0x2
                 _j:
000562           	.BYTE 0x2
                 _f:
000564           	.BYTE 0x2
                 _s:
000566           	.BYTE 0x2
                 __base_y_G100:
000568           	.BYTE 0x4
                 __lcd_x:
00056c           	.BYTE 0x1
                 __lcd_y:
00056d           	.BYTE 0x1
                 __lcd_maxx:
00056e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x0:
00042f e0aa      	LDI  R26,LOW(10)
000430 e0b0      	LDI  R27,0
000431 940c 048e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000433 93ea      	ST   -Y,R30
000434 e0a1      	LDI  R26,LOW(1)
000435 940c 03b0 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000437 e0e0      	LDI  R30,LOW(0)
000438 93e0 0564 	STS  _f,R30
00043a 93e0 0565 	STS  _f+1,R30
00043c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
00043d 01f6      	MOVW R30,R12
00043e e3ac      	LDI  R26,LOW(_game)
00043f e0b5      	LDI  R27,HIGH(_game)
000440 0fee      	LSL  R30
000441 1fff      	ROL  R31
000442 0fae      	ADD  R26,R30
000443 1fbf      	ADC  R27,R31
000444 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000445 91a0 053c 	LDS  R26,_game
000447 91b0 053d 	LDS  R27,_game+1
000449 0fae      	ADD  R26,R30
00044a 1fbf      	ADC  R27,R31
00044b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
                +
00044c 91e0 0544+LDS R30 , _game + ( 8 )
00044e 91f0 0545+LDS R31 , _game + ( 8 ) + 1
                 	__GETW1MN _game,8
000450 0fae      	ADD  R26,R30
000451 1fbf      	ADC  R27,R31
000452 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000453 0fae      	ADD  R26,R30
000454 1fbf      	ADC  R27,R31
                +
000455 91e0 054c+LDS R30 , _game + ( 16 )
000457 91f0 054d+LDS R31 , _game + ( 16 ) + 1
                 	__GETW1MN _game,16
000459 0fea      	ADD  R30,R26
00045a 1ffb      	ADC  R31,R27
00045b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
                +
00045c 91e0 0548+LDS R30 , _game + ( 12 )
00045e 91f0 0549+LDS R31 , _game + ( 12 ) + 1
                 	__GETW1MN _game,12
000460 0fea      	ADD  R30,R26
000461 1ffb      	ADC  R31,R27
000462 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000463 e0a1      	LDI  R26,LOW(1)
000464 e0b0      	LDI  R27,0
000465 940c 017a 	JMP  _get_started
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000467 940e 00b9 	CALL _get_key
000469 012f      	MOVW R4,R30
00046a e0eb      	LDI  R30,LOW(11)
00046b e0f0      	LDI  R31,HIGH(11)
00046c 15e4      	CP   R30,R4
00046d 05f5      	CPC  R31,R5
00046e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
00046f e3ac      	LDI  R26,LOW(_game)
000470 e0b5      	LDI  R27,HIGH(_game)
000471 0fee      	LSL  R30
000472 1fff      	ROL  R31
000473 0fae      	ADD  R26,R30
000474 1fbf      	ADC  R27,R31
000475 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
000476 01f6      	MOVW R30,R12
000477 e4ae      	LDI  R26,LOW(_sum)
000478 e0b5      	LDI  R27,HIGH(_sum)
000479 0fee      	LSL  R30
00047a 1fff      	ROL  R31
00047b 0fae      	ADD  R26,R30
00047c 1fbf      	ADC  R27,R31
00047d 940e 04c2 	CALL __GETW1P
00047f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000480 940e 03a4 	CALL __lcd_write_data
000482 e0a3      	LDI  R26,LOW(3)
000483 e0b0      	LDI  R27,0
000484 940c 048e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
000486 e3a0      	LDI  R26,LOW(48)
000487 940e 0390 	CALL __lcd_write_nibble_G100
                +
000489 ec88     +LDI R24 , LOW ( 200 )
00048a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00048b 9701     +SBIW R24 , 1
00048c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00048d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00048e 9610      	adiw r26,0
00048f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000490 ed80     +LDI R24 , LOW ( 0x7D0 )
000491 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000492 9701     +SBIW R24 , 1
000493 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000494 95a8      	wdr
000495 9711      	sbiw r26,1
000496 f7c9      	brne __delay_ms0
                 __delay_ms1:
000497 9508      	ret
                 
                 __ANEGW1:
000498 95f1      	NEG  R31
000499 95e1      	NEG  R30
00049a 40f0      	SBCI R31,0
00049b 9508      	RET
                 
                 __LNEGW1:
00049c 2bef      	OR   R30,R31
00049d e0e1      	LDI  R30,1
00049e f009      	BREQ __LNEGW1F
00049f e0e0      	LDI  R30,0
                 __LNEGW1F:
0004a0 9508      	RET
                 
                 __DIVW21U:
0004a1 2400      	CLR  R0
0004a2 2411      	CLR  R1
0004a3 e190      	LDI  R25,16
                 __DIVW21U1:
0004a4 0faa      	LSL  R26
0004a5 1fbb      	ROL  R27
0004a6 1c00      	ROL  R0
0004a7 1c11      	ROL  R1
0004a8 1a0e      	SUB  R0,R30
0004a9 0a1f      	SBC  R1,R31
0004aa f418      	BRCC __DIVW21U2
0004ab 0e0e      	ADD  R0,R30
0004ac 1e1f      	ADC  R1,R31
0004ad c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004ae 60a1      	SBR  R26,1
                 __DIVW21U3:
0004af 959a      	DEC  R25
0004b0 f799      	BRNE __DIVW21U1
0004b1 01fd      	MOVW R30,R26
0004b2 01d0      	MOVW R26,R0
0004b3 9508      	RET
                 
                 __MODW21:
0004b4 94e8      	CLT
0004b5 ffb7      	SBRS R27,7
0004b6 c004      	RJMP __MODW211
0004b7 95a0      	COM  R26
0004b8 95b0      	COM  R27
0004b9 9611      	ADIW R26,1
0004ba 9468      	SET
                 __MODW211:
0004bb fdf7      	SBRC R31,7
0004bc dfdb      	RCALL __ANEGW1
0004bd dfe3      	RCALL __DIVW21U
0004be 01fd      	MOVW R30,R26
0004bf f40e      	BRTC __MODW212
0004c0 dfd7      	RCALL __ANEGW1
                 __MODW212:
0004c1 9508      	RET
                 
                 __GETW1P:
0004c2 91ed      	LD   R30,X+
0004c3 91fc      	LD   R31,X
0004c4 9711      	SBIW R26,1
0004c5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :  21 r1 :   5 r2 :   0 r3 :   0 r4 :  17 r5 :  11 r6 :   8 r7 :   5 
r8 :   7 r9 :   3 r10:   4 r11:   2 r12:  16 r13:   7 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   7 r26: 114 r27:  48 r28:   4 r29:   1 r30: 248 r31: 125 
x  :  16 y  :  37 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  13 add   :  14 
adiw  :  11 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  41 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  72 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  17 cpc   :  24 cpi   :  11 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   0 jmp   :  41 ld    :  18 ldd   :   6 ldi   : 192 
lds   :  50 lpm   :   7 lsl   :   4 lsr   :   0 mov   :   8 movw  :  30 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   1 out   :  14 pop   :   0 push  :   0 rcall :  27 ret   :  39 
reti  :   0 rjmp  :  83 rol   :   6 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   5 sbic  :  32 sbis  :  16 sbiw  :  15 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   2 sts   :  44 sub   :   1 subi  :   5 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00098c   2308    136   2444   65536   3.7%
[.dseg] 0x000100 0x00056f      0    111    111    4096   2.7%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 10 warnings
